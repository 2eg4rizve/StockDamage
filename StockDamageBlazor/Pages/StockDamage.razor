
@page "/stockdamage"
@using StockDamageBlazor.Services
@using StockDamageBlazor.Models
@inject GodownService GodownService
@inject SubItemService SubItemService
@inject CurrencyService CurrencyService
@inject EmployeeService EmployeeService
@inject StockService StockService
@inject StockDamageService StockDamageService
@inject IJSRuntime JS
@using Microsoft.JSInterop
@using StockDamageBlazor.Models

<h3 class="mt-3 mb-3 text-primary">🧾 Stock Damage Entry</h3>

<div class="card shadow p-4">
    <div class="row g-3">
        <!-- Warehouse -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Warehouse Name</label>
            <select class="form-select" @bind="selectedGodownId">
                <option value="">-- Select Godown --</option>
                @foreach (var g in godowns)
                {
                    <option value="@g.AutoSlNo">@g.GodownName</option>
                }
            </select>
        </div>

        <!-- Item Name -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Item Name</label>
            <select class="form-select" @onchange="OnItemChanged">
                <option value="">-- Select Item --</option>
                @foreach (var item in subItems)
                {
                    <option value="@item.AutoSlNo">@item.SubItemName</option>
                }
            </select>
        </div>

        <!-- Item Code -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Item Code</label>
            <input class="form-control" @bind="currentItem.SubItemCodeValue" readonly />
        </div>

        <!-- Unit -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Unit</label>
            <input class="form-control" @bind="currentItem.Unit" readonly />
        </div>

        <!-- Stock -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Stock</label>
            <input class="form-control" @bind="currentStock" readonly />
        </div>

        <!-- Batch No -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Batch No</label>
            <input class="form-control" @bind="batchNo" readonly />
        </div>

        <!-- Currency -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Currency</label>
            <select class="form-select" @onchange="OnCurrencyChanged">
                <option value="">-- Select Currency --</option>
                @foreach (var c in currencies)
                {
                    <option value="@c.CurrencyID">@c.CurrencyName</option>
                }
            </select>
        </div>

        <!-- Exchange Rate -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Exchange Rate</label>
            <input class="form-control" @bind="selectedExchangeRate" readonly />
        </div>

        <!-- Quantity -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Quantity</label>
            <input type="number" step="0.01" class="form-control" @bind="quantity" />
        </div>

        <!-- Rate -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Rate</label>
            <input type="number" step="0.01" class="form-control" @bind="rate" />
        </div>

        <!-- Amount In -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Amount In</label>
            <input type="number" step="0.01" class="form-control" value="@amountIn" readonly />
        </div>

        <!-- Dr A/C Head -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Dr A/C Head</label>
            <input class="form-control" value="Stock Damage" readonly />
        </div>

        <!-- Employee -->
        <div class="col-md-3">
            <label class="form-label fw-bold">Employee</label>
            <select class="form-select" @bind="selectedEmployeeId">
                <option value="">-- Select Employee --</option>
                @foreach (var e in employees)
                {
                    <option value="@e.EmployeeID">@e.EmployeeName</option>
                }
            </select>
        </div>

        <!-- Comments -->
        <div class="col-md-9">
            <label class="form-label fw-bold">Comments</label>
            <textarea class="form-control" @bind="comments"></textarea>
        </div>

        <!-- Add Button -->
        <div class="col-md-3 d-flex align-items-end">
            <button class="btn btn-success w-100" @onclick="AddItem">➕ Add</button>
        </div>
    </div>
</div>

<!-- Table for Added Items -->
@if (addedItems.Any())
{
    <div class="mt-4 card p-3 shadow">
        <h5 class="text-secondary mb-3">🧩 Added Items</h5>
        <table class="table table-striped">
            <thead class="table-dark">
                <tr>
                    <th>Warehouse</th>
                    <th>Item Name</th>
                    <th>Unit</th>
                    <th>Stock</th>
                    <th>Qty</th>
                    <th>Rate</th>
                    <th>Amount</th>
                    <th>Currency</th>
                    <th>Employee</th>
                    <th>Comments</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in addedItems)
                {
                    <tr>
                        <td>@godowns.FirstOrDefault(g => g.AutoSlNo == item.GodownId)?.GodownName</td>
                        <td>@item.ItemName</td>
                        <td>@item.Unit</td>
                        <td>@item.Stock</td>
                        <td>@item.Quantity</td>
                        <td>@item.Rate</td>
                        <td>@item.AmountIn</td>
                        <td>@currencies.FirstOrDefault(c => c.CurrencyID == item.CurrencyId)?.CurrencyName</td>
                        <td>@employees.FirstOrDefault(e => e.EmployeeID == item.EmployeeId)?.EmployeeName</td>
                        <td>@item.Comments</td>
                        <td>
                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveItem(item)">🗑</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-primary mt-3" @onclick="SaveAll">💾 Save All</button>
    </div>
}

@code {
    // Dropdown Data
    private List<Godown> godowns = new();
    private List<SubItemCode> subItems = new();
    private List<Currency> currencies = new();
    private List<Employee> employees = new();
    private List<Stock> stocks = new();

    // Current selections
    private int selectedGodownId;
    private int selectedEmployeeId;
    private int selectedCurrencyId;
    private decimal selectedExchangeRate;
    private SubItemCode currentItem = new();
    private decimal currentStock;
    private string batchNo = "NA";
    private decimal quantity;
    private decimal rate;
    private decimal amountIn => quantity * rate;
    private string comments = "";

    // Added items temp list
    private List<StockDamageDto> addedItems = new();

    protected override async Task OnInitializedAsync()
    {
        godowns = await GodownService.GetAllAsync();
        subItems = await SubItemService.GetAllAsync();
        currencies = await CurrencyService.GetAllAsync();
        employees = await EmployeeService.GetAllAsync();
        stocks = await StockService.GetAllAsync();
    }

    private void OnItemChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            currentItem = subItems.FirstOrDefault(x => x.AutoSlNo == id) ?? new SubItemCode();
            currentStock = stocks.FirstOrDefault(s => s.SubItemCodeValue == currentItem.SubItemCodeValue)?.Quantity ?? 0;
        }
    }

    private void OnCurrencyChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int id))
        {
            selectedCurrencyId = id;
            selectedExchangeRate = currencies.FirstOrDefault(c => c.CurrencyID == id)?.ConversionRate ?? 0;
        }
    }

    private void AddItem()
    {
        if (selectedGodownId == 0 || currentItem.AutoSlNo == 0 || selectedCurrencyId == 0 || selectedEmployeeId == 0)
            return;

        addedItems.Add(new StockDamageDto
        {
            GodownId = selectedGodownId,
            SubItemId = currentItem.AutoSlNo,
            CurrencyId = selectedCurrencyId,
            EmployeeId = selectedEmployeeId,
            ItemName = currentItem.SubItemName,
            Unit = currentItem.Unit,
            Stock = currentStock,
            BatchNo = batchNo,
            Quantity = quantity,
            Rate = rate,
            AmountIn = amountIn,
            DrACHead = "Stock Damage",
            Comments = comments
        });

        // Clear form
        quantity = 0;
        rate = 0;
        comments = "";
    }

    private void RemoveItem(StockDamageDto item)
    {
        addedItems.Remove(item);
    }

    private async Task SaveAll()
    {
        if (!addedItems.Any())
            return;

        await StockDamageService.SaveStockDamageAsync(addedItems);
        addedItems.Clear();
        await Task.Delay(500);
        await OnInitializedAsync();
        await JS.InvokeVoidAsync("alert", "✅ Stock Damage Saved Successfully!");
    }
}
